---

# # Install and enable extensions

# # - name: Get extension information for {{ item.id }}
# #   register: r_gnome_extension_info
# #   when: "'name' not in item or 'url' not in item"
# #   ansible.builtin.uri:
# #     url: https://extensions.gnome.org/extension-info/?pk={{ item.id }}&shell_version={{ gnome_shell_version }}
# #     return_content: true

# # - name: Add gnome_extension item with additional info to gnome_extensions_full
# #   ansible.builtin.set_fact:
# #     gnome_extensions_full: |
# #       {{ gnome_extensions_full | default([]) + [ {
# #         'id': item.id,
# #         'name': item.name | default( r_gnome_extension_info.json.uuid ),
# #         'url': item.url | default( 'https://extensions.gnome.org' + r_gnome_extension_info.json.download_url ),
# #         'enable': item.enable | default( false )
# #       } ] }}
# #   when: "'skipped' not in r_gnome_extension_info"

# # - name: Add original gnome_extensions item to gnome_extensions_full
# #   ansible.builtin.set_fact:
# #     gnome_extensions_full: "{{ gnome_extensions_full | default([]) + [ item ] }}"
# #   when: "'skipped' in r_gnome_extension_info"

# # Set the Gnome version as Ansible fact
# - name: Parse Gnome Shell version
#   ansible.builtin.shell:
#     cmd: |
#       set -o pipefail
#       gnome-shell --version | sed 's/^[^0-9.]*//' | sed 's/[^0-9]*$//'
#     executable: /bin/bash
#   register: r_gnome_extension_parse_shell_version
#   changed_when: false

# - name: Set Gnome Shell version as parameter
#   ansible.builtin.set_fact:
#     gnome_shell_version: "{{ r_gnome_extension_parse_shell_version.stdout }}"

# - name: Download Gnome Shell extensions
#   loop: "{{ gnome_extensions }}"
#   loop_control:
#     label: "{{ item.id }}"
#   tags:
#     - extensions
#   ansible.builtin.get_url:
#     url: "https://extensions.gnome.org/extension-info/?pk={{ item.id }}&shell_version={{ gnome_shell_version }}"
#     dest: "/tmp/{{ item.name }}.zip"
#     mode: 0644

# - name: Enable Gnome extensions
#   dconf:
#     key: "/org/gnome/shell/enabled-extensions"
#     value: "['background-logo@fedorahosted.org', 'dash-to-panel@jderose9.github.com', 'date-menu-formatter@marcinjakubowski.github.com', 'no-overview@fthx', 'openweather-extension@jenslody.de', 'gTile@vibou', 'forge@jmmaranan.com', 'tactile@lundal.io', 'wintile@nowsci.com']"

- name: Load Gnome extension information
  include_tasks: gnome_extension_info.yml
  loop: "{{ gnome_extensions|default([]) }}"

- name: Download GNOME Shell extensions
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{ item.name }}.zip"
    mode: 0644
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Create GNOME extension directories
  ansible.builtin.file:
    path: /home/{{ gnome_user }}/.local/share/gnome-shell/extensions/{{ item.name }}
    state: directory
  become_user: "{{ gnome_user }}"
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Unzip GNOME extensions
  ansible.builtin.unarchive:
    src: "/tmp/{{ item.name }}.zip"
    dest: "/home/{{ gnome_user }}/.local/share/gnome-shell/extensions/{{ item.name }}"
    remote_src: true
  become_user: "{{ gnome_user }}"
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions
  register: unzipped_extension

- name: Restart Gnome Shell to ensure all extensions are visible
  become_user: "{{ gnome_user }}"
  ansible.builtin.command:
    cmd: killall -3 gnome-shell
  when: unzipped_extension.changed

- name: Enable extensions
  ansible.builtin.command: gnome-shell-extension-tool -e {{ item.name }}
  become_user: "{{ gnome_user }}"
  when: item.enable | default(false)
  loop: "{{ gnome_extensions_full | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  register: r_gnome_enable_extension
  changed_when: "'is now enabled' in r_gnome_enable_extension.stderr"
  failed_when: r_gnome_enable_extension.rc != 0 and 'already enabled' not in r_gnome_enable_extension.stderr
  tags:
    - settings

- name: Enable extensions with newer command
  ansible.builtin.command: gnome-extensions enable {{ item.item.name }}
  become_user: "{{ gnome_user }}"
  when:
    - item.item.enable | default(false)
    - "'gnome-shell-extension-tool is deprecated' in item.stderr"
  loop: "{{ r_gnome_enable_extension.results | default([]) }}"
  loop_control:
    label: "{{ item.item.name }}"
  changed_when: yes # Unfortunately the command does not return anything, so we can't know if it changed anything
  tags:
    - settings
  ignore_errors: true

- name: Create a list of enabled extensions
  become_user: "{{ gnome_user }}"
  ansible.builtin.shell: gnome-extensions list --enabled > /tmp/after.txt
  changed_when: false

- name: Compare the list of enabled extensions
  ansible.builtin.shell: diff --ignore-all-space /tmp/before.txt /tmp/after.txt|awk '/[<>]/{print $2}'
  register: difference
  changed_when: false

- debug:
    msg: "Changes in enabled extensions: {{ difference.stdout }}"
  when: difference.stdout

- name: Clean up list
  become_user: "{{ gnome_user }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  changed_when: false
  loop:
    - /tmp/before.txt
    - /tmp/after.txt